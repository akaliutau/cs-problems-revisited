package problem.palindrome;

/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you
 * can remove one palindromic subsequence from s. Return the minimum number of
 * steps to make the given string empty. A string is a subsequence of a given
 * string, if it is generated by deleting some characters of a given string
 * without changing its order. A string is called palindrome if is one that
 * reads the same backward as well as forward. 
 * 
 * Example 1: Input: s = "ababa"
 * Output: 1 Explanation: String is already palindrome 
 * 
 * Example 2: Input: s =
 * "abb" Output: 2 Explanation: "abb" -> "bb" -> "". 
 * 
 * Remove palindromic
 * subsequence "a" then "bb".
 * 
 * IDEA:
 * removing any 2 symbols always lead to palindrome
 * 
 * a - palindrome, 0
 * ab - not palindrome, 1
 * abb - 1) either palindrome 2) can be reduced to previous case in 1 step, total = 2
 * abba - palindrome, 0
 * abbb 
 *   
 * [      palindrome - 1     ]    a
 *    1 step to palindrome       1 step
 * 
 */
public class Solution1332 {
    
    boolean isPalindrome(char[] s){
        int left = 0;
        int right = s.length - 1;
        while(left < right){
            if(s[left++] != s[right--]){
                return false;
            }
        }
        return true;
    }

    public int removePalindromeSub(String s) {
        char[] chars = s.toCharArray();
        if(chars.length == 0) {
            return 0;
        }
        if(isPalindrome(chars)){
            return 1;
        }else { 
            return 2;
        }
    }
    

}
